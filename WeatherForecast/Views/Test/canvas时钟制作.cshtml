@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>canvas钟表</title>
    <meta name="viewport" content="width=device-width" />
    <meta name="Keywords" content="">
    <meta name="author" content="managersi">
    <style type="text/css">
        body {
            margin: 0;
        }
    </style>
</head>
<body onload="run()">
    <canvas id="canvas" width=400 height=400 style="border: 1px #ccc solid;">如果你看到这段文字，说明你的浏览器弱爆了！</canvas>
    <script>
        window.onload=draw;
        function draw() {
            var canvas=document.getElementById('canvas');
            var context=canvas.getContext('2d');
            context.save(); ///////////////////////////////////保存
            context.translate(200,200);
            var deg=2*Math.PI/12;
            //////////////////////////////////////////////////表盘
            context.save();
            context.beginPath();
            for(var i=0;i<13;i++){
                var x=Math.sin(i*deg);
                var y=-Math.cos(i*deg);
                context.lineTo(x*150,y*150);
            }
            var c=context.createRadialGradient(0,0,0,0,0,130);
            c.addColorStop(0,"#22f");
            c.addColorStop(1,"#0ef")
            context.fillStyle=c;
            context.fill();
            context.closePath();
            context.restore();
            //////////////////////////////////////////////////数字
            context.save();
            context.beginPath();
            for(var i=1;i<13;i++){
                var x1=Math.sin(i*deg);
                var y1=-Math.cos(i*deg);
                context.fillStyle="#fff";
                context.font="bold 20px Calibri";
                context.textAlign='center';
                context.textBaseline='middle';
                context.fillText(i,x1*120,y1*120);
            }
            context.closePath();
            context.restore();
            //////////////////////////////////////////////////大刻度
            context.save();
            context.beginPath();
            for(var i=0;i<12;i++){
                var x2=Math.sin(i*deg);
                var y2=-Math.cos(i*deg);
                context.moveTo(x2*148,y2*148);
                context.lineTo(x2*135,y2*135);
            }
            context.strokeStyle='#fff';
            context.lineWidth=4;
            context.stroke();
            context.closePath();
            context.restore();
            //////////////////////////////////////////////////小刻度
            context.save();
            var deg1=2*Math.PI/60;
            context.beginPath();
            for(var i=0;i<60;i++){
                var x2=Math.sin(i*deg1);
                var y2=-Math.cos(i*deg1);
                context.moveTo(x2*146,y2*146);
                context.lineTo(x2*140,y2*140);
            }
            context.strokeStyle='#fff';
            context.lineWidth=2;
            context.stroke();
            context.closePath();
            context.restore();
            ///////////////////////////////////////////////////文字
            context.save();
            context.strokeStyle="#fff";
            context.font=' 34px sans-serif';
            context.textAlign='center';
            context.textBaseline='middle';
            context.strokeText('canvas',0,65);
            context.restore();
            /////////////////////////////////////////////////new Date
            var time=new Date();
            var h=(time.getHours()%12)*2*Math.PI/12;
            var m=time.getMinutes()*2*Math.PI/60;
            var s=time.getSeconds()*2*Math.PI/60;///////////////////////////////////////////////时针
            context.save();
            context.rotate( h + m/12 + s/720) ;
            context.beginPath();
            context.moveTo(0,6);
            context.lineTo(0,-85);
            context.strokeStyle="#fff";
            context.lineWidth=6;
            context.stroke();
            context.closePath();
            context.restore();
            //////////////////////////////////////////////分针
            context.save();
            context.rotate( m+s/60 ) ;
            context.beginPath();
            context.moveTo(0,8);
            context.lineTo(0,-105);
            context.strokeStyle="#fff";
            context.lineWidth=4;
            context.stroke();
            context.closePath();
            context.restore();
            /////////////////////////////////////////////秒针
            context.save();
            context.rotate( s ) ;
            context.beginPath();
            context.moveTo(0,10);
            context.lineTo(0,-120);
            context.strokeStyle="#fff";
            context.lineWidth=2;
            context.stroke();
            context.closePath();
            context.restore();
            context.restore();/////////////////////////////栈出
            setTimeout(draw, 1000);/////////////////////////////计时器
            
        }
    </script>


    <br />
    <div  style="margin-left:100px"><div id="hoverclock"></div></div> 
    <script src="~/Scripts/jquery-2.1.4.min.js"></script>
    <script>
        (function ($) {
            $.fn.hoverclock = function (options) {

                var settings = $.extend({
                    h_radius: "10%",
                    h_borderColor: "transparent",
                    h_backColor: "transparent",
                    h_width: "300px",
                    h_height: "300px",
                    h_secondHandColor: "orangered",
                    h_frontColor: "darkgreen",
                    h_thinHandColor: "green",
                    h_linkText: "HoverClock",
                    h_linkUrl: "http://hovertree.com/texiao/hoverclock/",
                    h_linkColor: "deeppink",
                    h_linkSize: "16px"
                }, options);

                var h_hoverClock = $(this);


                h_hoverClock.css({ "width": settings.h_width, "height": settings.h_height, "position": "relative", "background-color": settings.h_backColor, "border-radius": settings.h_radius, "border": "solid 1px", "border-color": settings.h_borderColor })

                var h_hoverEntity = h_hoverClock.find(".hoverclockentity");

                if (h_hoverEntity.length < 1) {
                    h_hoverClock.append('<div class="hoverclockfill"><div class="hoverclockreference"></div><div class="hoverclockentity"><div class="hoverclocktext" style=""><a href="http://hovertree.com/texiao/hoverclock/" target="_blank" id="hoverclocklink">HoverClock</a></div><div class="hoverclockcentre"><div class="hoverclockdynamic"></div><div class="hoverclockexpand hoverclockexpand hoverclockcircle-1"></div><div class="hoverclockanchor hoverclockhour"><div class="hoverclockelement hoverclockthin-hand"></div><div class="hoverclockelement hoverclockfat-hand"></div></div><div class="hoverclockanchor hoverclockminute"><div class="hoverclockelement hoverclockthin-hand"></div><div class="hoverclockelement hoverclockfat-hand hoverclockminute-hand"></div></div><div class="hoverclockanchor hoverclocksecond"><div class="hoverclockelement hoverclocksecond-hand"></div></div><div class="hoverclockexpand hoverclockexpand hoverclockcircle-2"></div><div class="hoverclockexpand hoverclockexpand hoverclockcircle-3"></div></div></div></div>')
                    h_hoverEntity = h_hoverClock.find(".hoverclockentity");
                }

                var hoverEntityObj = h_hoverEntity[0]

                hoverClock(hoverEntityObj)

                //--------------------------
                h_hoverClock.find(".hoverclocksecond-hand").css({ "background-color": settings.h_secondHandColor })
                h_hoverClock.find(".hoverclockhour-text,.hoverclockminute-text").css({ "color": settings.h_frontColor })
                h_hoverClock.find(".hoverclockfat-hand,.hoverclockminute-line").css({ "background-color": settings.h_frontColor })
                h_hoverClock.find(".hoverclockthin-hand").css({ "background-color": settings.h_thinHandColor })
                h_hoverClock.find(".hoverclocktext").css({ "width": settings.h_width, "position": "absolute", "left": -h_hoverClock.width() / 2, "top": h_hoverClock.height() / 20 })
                var h_hoverClockLink = h_hoverClock.find("#hoverclocklink");
                h_hoverClockLink.text(settings.h_linkText);
                h_hoverClockLink.attr("href", settings.h_linkUrl);
                h_hoverClockLink.attr("title", settings.h_linkText);
                h_hoverClockLink.css({ "color": settings.h_linkColor, "font-size": settings.h_linkSize })

                //--------------------------

                var h_hoverClockSize = Math.min(h_hoverClock.width(), h_hoverClock.height());
                if (hoverEntityObj.parentNode.classList.contains('hoverclockfill')) autoResize(hoverEntityObj, h_hoverClockSize)

                function hoverClock(container) {
                    var hoverclockdynamic = container.querySelector('.hoverclockdynamic')
                    var hourElement = container.querySelector('.hoverclockhour')
                    var minuteElement = container.querySelector('.hoverclockminute')
                    var secondElement = container.querySelector('.hoverclocksecond')
                    var minute = function (n) {
                        return n % 5 == 0 ? minuteText(n) : minuteLine(n)
                    }
                    var minuteText = function (n) {
                        var element = document.createElement('div')
                        element.className = 'hoverclockminute-text'
                        element.innerHTML = (n < 10 ? '0' : '') + n
                        position(element, n / 60, 135)
                        hoverclockdynamic.appendChild(element)
                    }
                    var minuteLine = function (n) {
                        var hoverclockanchor = document.createElement('div')
                        hoverclockanchor.className = 'hoverclockanchor'
                        var element = document.createElement('div')
                        element.className = 'hoverclockelement hoverclockminute-line'
                        rotate(hoverclockanchor, n)
                        hoverclockanchor.appendChild(element)
                        hoverclockdynamic.appendChild(hoverclockanchor)
                    }
                    var hour = function (n) {
                        var element = document.createElement('div')
                        element.className = 'hoverclockhour-text hour-' + n
                        element.innerHTML = n
                        position(element, n / 12, 105)
                        hoverclockdynamic.appendChild(element)
                    }
                    var position = function (element, phase, r) {
                        var theta = phase * 2 * Math.PI
                        element.style.top = (-r * Math.cos(theta)).toFixed(1) + 'px'
                        element.style.left = (r * Math.sin(theta)).toFixed(1) + 'px'
                    }
                    var rotate = function (element, second) {
                        element.style.transform = element.style.webkitTransform = 'rotate(' + (second * 6) + 'deg)'
                    }
                    var animate = function () {
                        var now = new Date()
                        var time = now.getHours() * 3600 +
                                    now.getMinutes() * 60 +
                                    now.getSeconds() * 1 +
                                    now.getMilliseconds() / 1000
                        rotate(secondElement, time)
                        rotate(minuteElement, time / 60)
                        rotate(hourElement, time / 60 / 12)
                        requestAnimationFrame(animate)
                    }
                    for (var i = 1; i <= 60; i++) minute(i)
                    for (var i = 1; i <= 12; i++) hour(i)
                    animate()
                }

                function autoResize(element, nativeSize) {
                    var update = function () {
                        var h_scale = nativeSize / 296
                        element.style.transform = element.style.webkitTransform = 'scale(' + h_scale.toFixed(3) + ')'
                    }
                    update()
                }

            }
        }(jQuery));
    </script>
    <script>
        $("#hoverclock").hoverclock({});
    </script>
    <style>
        /*!
* HoverClock(jQuery Plugin)
* version: 1.0.0
* Copyright (c) 2016 HoverTree
* http://hovertree.com
* http://hovertree.com/texiao/hoverclock/
*/
.hoverclockentity {
    position: absolute;
    opacity: 1;
}

.hoverclockfill .hoverclockentity {
    left: 50%;
    top: 50%;
}

.hoverclockcentre {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
}

.hoverclockexpand {
    position: absolute;
    top: 0;
    left: 0;
    transform: translate(-50%, -50%);
}

.hoverclockanchor {
    position: absolute;
    top: 0;
    left: 0;
    width: 0;
    height: 0;
}

.hoverclockelement {
    position: absolute;
    top: 0;
    left: 0;
}

.hoverclockexpand {
    border-radius: 296px;
}

.hoverclockcircle-1 {
    background: white;
    width: 12px;
    height: 12px;
}

.hoverclockcircle-2 {
    background: #FA9F22;
    width: 8px;
    height: 8px;
}

.hoverclockcircle-3 {
    background: black;
    width: 4px;
    height: 4px;
}

.hoverclocksecond {
    transform: rotate(180deg);
}

.hoverclockminute {
    transform: rotate(54deg);
}

.hoverclocksecond-hand {
    width: 2px;
    height: 164px;
    background: #FA9F22;
    transform: translate(-50%,-100%) translateY(24px);
}

.hoverclockhour {
    transform: rotate(304.5deg);
}

.hoverclockthin-hand {
    width: 4px;
    height: 50px;
    background: white;
    transform: translate(-50%,-100%);
}

.hoverclockfat-hand {
    width: 10px;
    height: 57px;
    border-radius: 10px;
    background: white;
    transform: translate(-50%,-100%) translateY(-18px);
}

.hoverclockminute-hand {
    height: 112px;
}

.hoverclockhour-text {
    position: absolute;
    font: 40px Hei, Helvetica, Arial, sans-serif;
    color: white;
    transform: translate(-50%,-50%);
}

.hour-10 {
    padding-left: 0.4ex;
}
.hour-11 {
    padding-left: 0.25ex;
}

.hoverclockminute-text {
    position: absolute;
    font: 12px Avenir Next, Helvetica, Arial, sans-serif;
    color: white;
    transform: translate(-50%,-50%);
}

.hoverclockminute-line {
    background: white;
    width: 1px;
    height: 9px;
    transform: translate(-50%,-100%) translateY(-131px);
    opacity: 0.34;
}

.hoverclocktext{background-color:transparent;text-align:center;font-size:12px;margin:0px auto;left:0px;right:0px;overflow:hidden}
.hoverclocktext a{text-decoration:none}
    </style>
</body>
</html>